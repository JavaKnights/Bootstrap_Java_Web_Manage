<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd 
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.1.xsd 
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd 
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- 默认的注解映射的支持 -->
	<!-- 启用SpringMVC的注解功能,它会自动注册HandlerMapping、HandlerAdapter、ExceptionResolver的相关实例 --> 
	<mvc:annotation-driven>
	<!-- 处理responseBody 里面日期类型  
        <mvc:message-converters>  
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
                <property name="objectMapper">  
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">  
                        <property name="dateFormat">  
                            <bean class="java.text.SimpleDateFormat">  
                                <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />  
                            </bean>  
                        </property>  
                    </bean>  
                </property>  
            </bean>  
        </mvc:message-converters>--> 
    </mvc:annotation-driven>  
	
	<!-- 
		配置一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射，  
  	  有人说该bean要放在context:component-scan前面，要不然不起作用，但我试的放后面也可以啊。  
  	  配置SpringMVC @ResponseBody和@RequestBody注解 
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="cacheSeconds" value="0" />
		<property name = "messageConverters">
		  <list>
		   <bean class = "org.springframework.http.converter.StringHttpMessageConverter">
		   		<property name = "supportedMediaTypes">
		   			<list>
		   				<value>text/plain;charset=UTF-8
		   				</value>
		   			</list>
		   		</property>
		   </bean> -->
		  	<!--json适配器 把后台对象转换为json格式
		   <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean> 
		  </list>
		 </property>
	</bean>  -->
	<!-- 
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">    
        <property name="converters">    
            <list>    
                <bean class="com.fengdi.web.manage.common.springmvc.DateConverter" />    
            </list>    
        </property>    
    </bean> 
	
	<mvc:annotation-driven conversion-service="conversionService" />  -->
	
	<!--注解说明 
	<context:annotation-config /> -->

	<!-- @Controller 声明Action组件 @Service 声明Service组件 @Service("myMovieLister") 
		@Repository 声明Dao组件 @Component 泛指组件, 当不好归类时. @RequestMapping("/menu") 请求映射 
		@Resource 用于注入，( j2ee提供的 ) 默认按名称装配，@Resource(name="beanName") @Autowired 
		用于注入，(spring提供的) 默认按类型装配 @Transactional( rollbackFor={Exception.class}) 事务管理 
		@ResponseBody @Scope("prototype") 设定bean的作用域 -->
		
	<!-- 自动扫描的包名 -->
	<!-- 它背后注册了很多用于解析注解的处理器,其中就包括<context:annotation-config/>配置的注解所使用的处理器 -->  
    <!-- 所以配置了<context:component-scan base-package="">之后,便无需再配置<context:annotation-config> --> 	
	<context:component-scan base-package="com.xiuxinger.origin.web" />
	
	<!-- 默认访问跳转到登录页面(即定义无需Controller的url<->view直接映射)  
    <mvc:view-controller path="/" view-name="forward:/views/login.jsp"/>  -->

	<!-- 对静态资源文件的访问  方案一 （二选一）  -->
    <mvc:default-servlet-handler/> 
	
	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->   
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <property name="defaultEncoding" value="UTF-8"/>  
        <!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->  
        <property name="maxUploadSize">
			<!-- 上传文件大小限制为31M，31*1024*1024 -->
			<value>32505856</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>  
    </bean>  

	<!-- 配置SpringMVC的视图解析器 -->  
    <!-- 其viewClass属性的默认值就是org.springframework.web.servlet.view.JstlView -->  
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 
	<mvc:view-controller path="order/toQueryOrder.do" view-name="order/queryOrder"/>
	 -->
	
	<!-- 全局异常配置 start -->      
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">      
         <property name="exceptionMappings">      
             <props>      
                 <prop key="java.lang.Exception">error/500</prop>      
                 <prop key="java.lang.Throwable">error/500</prop>      
             </props>      
         </property>      
         <property name="statusCodes">      
             <props>        
                 <prop key="error/404">404</prop>    
                 <prop key="error/500">500</prop>     
             </props>      
         </property>      
         <!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->      
         <property name="warnLogCategory" value="WARN"></property>      
         <!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->      
         <property name="defaultErrorView" value="error/500"></property>      
         <!-- 默认HTTP状态码 -->      
         <property name="defaultStatusCode" value="500"></property>      
     </bean>      
     <!-- 全局异常配置 end -->

</beans>